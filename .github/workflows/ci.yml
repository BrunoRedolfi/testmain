name: Java CI and Docker Publish

on:
  push:
    branches: [ "main", "dev", "test", "prod" ]

env:
  APP_NAME: "testmain"
  JAR_NAME: "app.jar"
  REGISTRY: ghcr.io

jobs:
  build-test-and-publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Build application
      run: |
        chmod +x gradlew
        ./gradlew clean bootJar
        echo "📦 JAR files built:"
        ls -la build/libs/
        # Verificar que el JAR existe
        if [ ! -f "build/libs/app.jar" ]; then
          echo "❌ Error: app.jar not found!"
          echo "Available files in build/libs/:"
          ls -la build/libs/
          exit 1
        fi

    - name: Run tests
      run: ./gradlew test
      env:
        SPRING_PROFILES_ACTIVE: test

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract branch name
      shell: bash
      run: |
        # Extraer el nombre de la rama del ref
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        echo "Branch: $BRANCH_NAME"

    - name: Build and push Docker image
      run: |
        # Extraer el nombre de la rama del ref
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

        # Convertir nombres a minúsculas
        OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        APP_NAME_LOWER=$(echo "${{ env.APP_NAME }}" | tr '[:upper:]' '[:lower:]')

        # Determinar el tag basado en la rama
        case "${{ env.BRANCH_NAME }}" in
          "main")
            ENV_TAG="latest"
            ;;
          "dev")
            ENV_TAG="dev"
            ;;
          "test")
            ENV_TAG="test"
            ;;
          "prod")
            ENV_TAG="prod"
            ;;
          *)
            ENV_TAG="${{ env.BRANCH_NAME }}"
            ;;
        esac

        echo "Building image with tags:"
        echo "- ghcr.io/$OWNER_LOWER/$APP_NAME_LOWER:$ENV_TAG"
        echo "- ghcr.io/$OWNER_LOWER/$APP_NAME_LOWER:$ENV_TAG-${{ github.sha }}"

        # Construir y publicar imagen - MISMO PROCESO ORIGINAL
        docker buildx build \
          --tag ghcr.io/$OWNER_LOWER/$APP_NAME_LOWER:$ENV_TAG \
          --tag ghcr.io/$OWNER_LOWER/$APP_NAME_LOWER:$ENV_TAG-${{ github.sha }} \
          --push .
      shell: bash

    - name: Summary
      run: |
        OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        APP_NAME_LOWER=$(echo "${{ env.APP_NAME }}" | tr '[:upper:]' '[:lower:]')

        case "${{ env.BRANCH_NAME }}" in
          "main") ENV_TAG="latest" ;;
          "dev") ENV_TAG="dev" ;;
          "test") ENV_TAG="test" ;;
          "prod") ENV_TAG="prod" ;;
          *) ENV_TAG="${{ env.BRANCH_NAME }}" ;;
        esac

        echo "✅ Build completed successfully!"
        echo "📦 Docker images pushed:"
        echo "   - ghcr.io/$OWNER_LOWER/$APP_NAME_LOWER:$ENV_TAG"
        echo "   - ghcr.io/$OWNER_LOWER/$APP_NAME_LOWER:$ENV_TAG-${{ github.sha }}"
        echo "🌿 Branch: ${{ env.BRANCH_NAME }}"
        echo "🔄 Ready for ArgoCD deployment!"
    - name: Update K8s manifests
      if: github.ref != 'refs/heads/main'  # No actualizar para main/latest
      run: |
        # Configurar git
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

        # Clonar el repo de k8s manifests
        git clone https://${{ secrets.K8S_REPO_TOKEN }}@github.com/${{ github.repository_owner }}/k8s.git k8s-repo
        cd k8s-repo

        # Determinar environment y tag
        case "${{ env.BRANCH_NAME }}" in
          "dev")
            ENV="dev"
            TAG="dev-${{ github.sha }}"
            ;;
          "test")
            TAG="test-${{ github.sha }}"
            ENV="test"
            ;;
          "prod")
            TAG="prod-${{ github.sha }}"
            ENV="prod"
            ;;
          *)
            echo "Branch ${{ env.BRANCH_NAME }} not configured for deployment"
            exit 0
            ;;
        esac

        echo "Updating $ENV environment with tag: $TAG"

        # Actualizar el kustomization.yaml del overlay correspondiente
        sed -i "s|newTag: .*|newTag: $TAG|" overlays/$ENV/kustomization.yaml

        # Verificar cambios
        if git diff --quiet; then
          echo "No changes to commit"
          exit 0
        fi

        # Commit y push
        git add overlays/$ENV/kustomization.yaml
        git commit -m "Update $ENV image tag to $TAG [skip ci]"
        git push origin main

        echo "✅ K8s manifests updated successfully!"
        echo "🔄 ArgoCD will detect changes and deploy automatically"
      shell: bash